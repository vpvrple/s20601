@page "/top100"

@using Services
@using s20601.Data.Models.DTOs

@inject IRatingService RatingSvc

<MudText Class="mt-6" Typo="Typo.h4">Top 100 movies of all time</MudText>
<MudGrid>
    @if (topMoviesByRating is null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        @foreach (var movie in topMoviesByRating)
        {
            <MudItem>
                <MudCard>
                    <MudImage Src="favicon.png"
                              ObjectFit="ObjectFit.None"
                              Alt="Movie poster"
                              Elevation="0"
                              Height="300"
                              Width="280" />
                    <MudCardContent>
                        <MudStack>
                            <MudText Typo="Typo.h6" Align="Align.Center">
                                @(topMoviesByRating.IndexOf(movie) + 1). @movie.Title
                                <MudText Typo="Typo.subtitle2">(@movie.StartYear) @(movie.Runtime / 60) hours @(movie.Runtime % 60) minutes</MudText>
                            </MudText>

                            <MudDivider />
                            <MudStack Row="true" Class="justify-center">
                                @* <MovieRatingExtended RateCount="movie.MovieRatingSummary.RateCount" AvgRating="movie.MovieRatingSummary.AvgRating" Size="Size.Small" Typo="Typo.subtitle2" /> *@
                                <MovieRatingExtended MovieId="movie.Id" Size="Size.Medium" Typo="Typo.body1" />
                            </MudStack>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    }

</MudGrid>

@code {
    List<MovieWithRating> topMoviesByRating = null!;

    protected override async Task OnInitializedAsync()
    {
        topMoviesByRating = await RatingSvc.GetTopMoviesByRatingAsync(100);
    }
}