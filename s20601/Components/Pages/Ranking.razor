@page "/ranking"
@using s20601.Data
@using s20601.Data.Models
@using s20601.Services
@inject IUserService UserSvc
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<MudText Class="mt-6" Typo="Typo.h4">Reputation ranking</MudText>

@if (Users is null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Class="mt-6" Items="@Users" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Username</MudTh>
            <MudTh>Joined</MudTh>
            <MudTh>Points</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@(Users.IndexOf(context) + 1)</MudTd>
            <MudTd DataLabel="Username">
                @if (isAuthenticated)
                {
                    <MudLink Href="@($"user/{context.Email}")">@context.UserName</MudLink>
                }
                else
                {
                    <MudLink Href="/account/login">@context.UserName</MudLink>
                }
                </MudTd>
            <MudTd DataLabel="Name">@context.CreatedAt.Date.ToShortDateString()</MudTd>
            <MudTd DataLabel="Position" HideSmall="_hidePosition">@context.ReputationPoints</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }"
            RowsPerPageString="@rowsPerPageString" />

        </PagerContent>

    </MudTable>
}
@code {
    private bool _hidePosition;
    private bool _loading;
    private List<ApplicationUser> Users = null!;
    private bool isAuthenticated = false;


    private string rowsPerPageString = "Rows per page:";

    protected override async Task OnInitializedAsync()
    {
        Users = await UserSvc.GetTopUsersByPoints();
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity.IsAuthenticated)
        {
            isAuthenticated = true;
        }

    }
}