@using s20601.Services;
@using s20601.Data.Models;

@inject IUserService UserSvc
@inject IReviewService ReviewSvc
@inject NavigationManager NavigationManager

<MudChat Color="@Color">
    <MudAvatar>
        @Avatar
    </MudAvatar>
    <MudChatHeader Name="@Nickname" Time="@CreatedAt.ToString()"/>
    <MudChatBubble Style="width: 100%;">
        @Content
    </MudChatBubble>
    <MudChatFooter>
        <AuthorizeView>
            <Authorized>
                <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" OnClick="() => Vote(1)" />
                @LikeRating
                <MudIconButton Icon="@Icons.Material.Filled.ThumbDown" OnClick="() => Vote(-1)" />
                @DislikeRating

                @if (CurrentUserId == AuthorId)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => Remove(Id, CurrentUserId)" />
                }
            </Authorized>
            <NotAuthorized>
                <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" OnClick="NavigateToLoginPage" />
                @LikeRating
                <MudIconButton Icon="@Icons.Material.Filled.ThumbDown" OnClick="NavigateToLoginPage" />
                @DislikeRating
            </NotAuthorized>
        </AuthorizeView>
    </MudChatFooter>
</MudChat>



@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;
    private string userId = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;

        if (authState.User.Identity.IsAuthenticated)
        {
            userId = authState.User.Claims.First().Value;
            var currentUserReviewRate = await ReviewSvc.GetUserVoteByReview(Id, userId);
        }
    }

    [Parameter]
    public required string CurrentUserId { get; set; }

    [Parameter]
    public required int Id { get; set; }

    [Parameter]
    public required string AuthorId { get; set; }

    [Parameter]
    public required string Avatar { get; set; }

    [Parameter]
    public required string Nickname { get; set; }

    [Parameter]
    public required DateTime CreatedAt { get; set; }

    [Parameter]
    public required string Content { get; set; }

    [Parameter]
    public required int LikeRating { get; set; }

    [Parameter]
    public required int DislikeRating { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter] 
    public required EventCallback<int> OnRemove { get; set; }

    private async Task Remove(int reviewId, string userId)
    {
        await ReviewSvc.RemoveReviewAsync(reviewId, userId);

        await OnRemove.InvokeAsync(reviewId);
    }

    private void NavigateToLoginPage() => NavigationManager.NavigateTo("account/login", true);

    [Parameter]
    public required EventCallback<(int reviewId, int newVote, int previousVote)> OnVote { get; set; }

    private async Task Vote(int newVote)
    {
        if (CurrentUserId == null)
            return;

        var currentVote = await ReviewSvc.GetUserVoteByReview(Id, CurrentUserId);
        int previousVote = currentVote?.Rating ?? 0;

        if (previousVote == newVote)
        {
            await ReviewSvc.RemoveVote(Id, CurrentUserId);
            newVote = 0;
        }
        else
        {
            await ReviewSvc.VoteReview(Id, CurrentUserId, newVote);
        }

        await OnVote.InvokeAsync((Id, newVote, previousVote));
    }
}
