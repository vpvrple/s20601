@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using s20601.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Log in</PageTitle>

<div class="row">
    <div class="col-lg-6">
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <MudContainer Class="mt-18" MaxWidth="MaxWidth.Small">
                    <DataAnnotationsValidator />
                    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">Log in</MudText>
                    <hr />
                    <MudGrid>
                        <MudItem xs="12">
                            <div class="form-floating mb-3">
                                <MudStaticTextField @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" Label="Email" />
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="form-floating mb-3">
                                <MudStaticTextField type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" Label="Password" InputType="InputType.Password" />
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="checkbox mb-3">
                                <label class="form-label">
                                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                    Remember me
                                </label>
                            </div>
                            <MudItem xs="12">
                                <ValidationSummary class="text-danger" role="alert" />
                                <StatusMessage Message="@errorMessage" />
                            </MudItem>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-center">
                            <div>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" Size="Size.Large">Log in</MudButton>
                            </div>
                        </MudItem>
                        <MudItem xs="12">
                            <MudDivider />
                        </MudItem>
                        <MudItem xs="12">
                            <div>
                                <p>
                                    <MudText Typo="Typo.body1" Align="Align.Center"><MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink></MudText>

                                </p>
                                @*                     <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p> *@
                                <p>
                                    <MudText Typo="Typo.body1" Align="Align.Center"><MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink></MudText>
                                </p>
                            </div>
                        </MudItem>
                    </MudGrid>
                </MudContainer>
            </EditForm>
        </section>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user is not null)
            {
                user.LastLogin = DateTime.UtcNow;
                await UserManager.UpdateAsync(user);
            }
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
