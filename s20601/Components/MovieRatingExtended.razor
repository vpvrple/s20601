@using Services
@using s20601.Data
@using s20601.Data.Models.DTOs
@using s20601.Data.Models

@inject IRatingService RatingSvc
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService UserSvc


<MudStack Row="true">
    <AuthorizeView>
        <NotAuthorized>
            <MudRating SelectedValue="@((int)Math.Round(AvgRating))"
                       Size="@Size"
                       SelectedValueChanged="NavigateToLoginPage" />
        </NotAuthorized>
        <Authorized>
            <MudRating SelectedValue="@(currentUserMovieRating?.Rating ?? 0)"
                       Size="@Size"
                       SelectedValueChanged="OnRatingChanged" />
        </Authorized>
    </AuthorizeView>

    @if (ratingSummary is null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudText Typo="@Typo">@Math.Round(AvgRating, 1)</MudText>
        <MudText Typo="@Typo">(@RateCount)</MudText>
    }

</MudStack>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    [Parameter]
    public Typo Typo { get; set; } = Typo.subtitle2;

    [Parameter]
    public Size Size { get; set; } = Size.Small;

    [Parameter]
    public int MovieId { get; set; }

    private MovieRate currentUserMovieRating = null!;

    private double AvgRating { get; set; }

    private double RateCount { get; set; }

    private string userId = null!;

    MovieRatingSummary ratingSummary = null!;

    protected override async Task OnInitializedAsync()
    {
        ratingSummary = await RatingSvc.GetMovieRatingSummaryByIdAsync(MovieId);

        AvgRating = ratingSummary.AvgRating;
        RateCount = ratingSummary.RateCount;

        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var username = user.Identity?.Name;
            userId = authState.User.Claims.First().Value;
            currentUserMovieRating = await RatingSvc.GetUserMovieRating(userId, MovieId);
        }
    }

    private async Task OnRatingChanged(int newRating)
    {
            await RatingSvc.RateMovieAsync(MovieId, userId, newRating);

            var updatedRating = await RatingSvc.GetMovieRatingSummaryByIdAsync(MovieId);
            if (updatedRating is null)
            {
                return;
            }
            AvgRating = updatedRating.AvgRating;
            RateCount = updatedRating.RateCount;
            StateHasChanged();
    }

    private void NavigateToLoginPage() => NavigationManager.NavigateTo("account/login", true);
}

