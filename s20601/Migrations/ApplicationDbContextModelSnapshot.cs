// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using s20601.Data;

#nullable disable

namespace s20601.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupOwnership", b =>
                {
                    b.Property<string>("IdOwner")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdGroup")
                        .HasColumnType("int");

                    b.HasKey("IdOwner", "IdGroup")
                        .HasName("GroupOwnership_pk");

                    b.HasIndex("IdGroup");

                    b.ToTable("GroupOwnership", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("ActivityType_pk");

                    b.ToTable("ActivityType", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("ReputationPoints")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("User_pk");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("IdComment")
                        .HasColumnType("int");

                    b.Property<int>("IdPost")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.HasKey("Id")
                        .HasName("Comment_pk");

                    b.HasIndex("IdComment");

                    b.HasIndex("IdPost");

                    b.HasIndex("IdUser");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.Crew", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<int?>("DeathYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("Crew_pk");

                    b.ToTable("Crew", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("Genre_pk");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("Group_pk");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.GroupMembership", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdGroup")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.HasKey("IdUser", "IdGroup")
                        .HasName("GroupMembership_pk");

                    b.HasIndex("IdGroup");

                    b.ToTable("GroupMembership", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<int>("Created")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliverTime")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("IdRecipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSender")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("Message_pk");

                    b.HasIndex("IdRecipient");

                    b.HasIndex("IdSender");

                    b.HasIndex("IdStatus");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RuntimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("Movie_pk");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.MovieCollection", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("MovieCollection_pk");

                    b.ToTable("MovieCollection", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.MovieCollectionMovie", b =>
                {
                    b.Property<int>("IdMovieCollection")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Movie_Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("IdMovieCollection")
                        .HasName("MovieCollectionMovie_pk");

                    b.HasIndex("Movie_Id");

                    b.ToTable("MovieCollectionMovie", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.MovieCollectionUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IdMovieCollection")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("MovieCollectionUser_pk");

                    b.HasIndex("IdMovieCollection");

                    b.HasIndex(new[] { "IdUser", "IdMovieCollection" }, "MovieCollectionUser_ak_1")
                        .IsUnique();

                    b.ToTable("MovieCollectionUser", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.MovieCrew", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdCrew")
                        .HasColumnType("int");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Movie_Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("MovieCrew_pk");

                    b.HasIndex("IdCrew");

                    b.HasIndex("Movie_Id");

                    b.ToTable("MovieCrew", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Genre_Id")
                        .HasColumnType("int");

                    b.Property<int>("Movie_Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("MovieGenre_pk");

                    b.HasIndex("Genre_Id");

                    b.HasIndex("Movie_Id", "Genre_Id")
                        .IsUnique();

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.MovieOfTheDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Movie_Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("MovieOfTheDay_pk");

                    b.HasIndex("Movie_Id")
                        .IsUnique();

                    b.ToTable("MovieOfTheDay", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.MovieRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Movie_Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<DateTime>("RatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("MovieRate_pk");

                    b.HasIndex("Movie_Id");

                    b.HasIndex(new[] { "IdUser", "Movie_Id" }, "UniqueRating")
                        .IsUnique();

                    b.ToTable("MovieRate", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.MovieUpdateRequest", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("Movie_Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("MovieUpdateRequest_pk");

                    b.HasIndex("IdUser");

                    b.HasIndex("Movie_Id");

                    b.ToTable("MovieUpdateRequest", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("IdGroup")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("LastModifiedAt")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id")
                        .HasName("Post_pk");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("IdAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Movie_Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("Review_pk");

                    b.HasIndex("IdAuthor")
                        .IsUnique();

                    b.HasIndex("Movie_Id");

                    b.HasIndex(new[] { "IdAuthor", "Movie_Id" }, "UniqueReview")
                        .IsUnique();

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.ReviewRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RatedAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Review_Id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("ReviewRate_pk");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.HasIndex("Review_Id");

                    b.ToTable("ReviewRate", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.SocialActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActivityAt")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int>("IdActivityType")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("SocialActivityLog_pk");

                    b.HasIndex("IdActivityType");

                    b.HasIndex("IdUser");

                    b.ToTable("SocialActivityLog", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("Status_pk");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("s20601.Data.Models.UserRelationship", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdRelatedUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdUser", "IdRelatedUser")
                        .HasName("UserRelationship_pk");

                    b.HasIndex("IdRelatedUser");

                    b.ToTable("UserRelationship", (string)null);
                });

            modelBuilder.Entity("GroupOwnership", b =>
                {
                    b.HasOne("s20601.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("GroupOwnership_Group");

                    b.HasOne("s20601.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("IdOwner")
                        .IsRequired()
                        .HasConstraintName("GroupOwnership_User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("s20601.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("s20601.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("s20601.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("s20601.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("s20601.Data.Models.Comment", b =>
                {
                    b.HasOne("s20601.Data.Models.Comment", "IdCommentNavigation")
                        .WithMany("InverseIdCommentNavigation")
                        .HasForeignKey("IdComment")
                        .HasConstraintName("Comment_Comment");

                    b.HasOne("s20601.Data.Models.Post", "IdPostNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdPost")
                        .IsRequired()
                        .HasConstraintName("Comment_Post");

                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdUserNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("Comment_User");

                    b.Navigation("IdCommentNavigation");

                    b.Navigation("IdPostNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("s20601.Data.Models.GroupMembership", b =>
                {
                    b.HasOne("s20601.Data.Models.Group", "IdGroupNavigation")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("GroupMembership_Group");

                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdUserNavigation")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("GroupMembership_User");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("s20601.Data.Models.Message", b =>
                {
                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdRecipientNavigation")
                        .WithMany("MessageIdRecipientNavigations")
                        .HasForeignKey("IdRecipient")
                        .IsRequired()
                        .HasConstraintName("Message_Recipient");

                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdSenderNavigation")
                        .WithMany("MessageIdSenderNavigations")
                        .HasForeignKey("IdSender")
                        .IsRequired()
                        .HasConstraintName("Message_Sender");

                    b.HasOne("s20601.Data.Models.Status", "IdStatusNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("IdStatus")
                        .IsRequired()
                        .HasConstraintName("Message_Status");

                    b.Navigation("IdRecipientNavigation");

                    b.Navigation("IdSenderNavigation");

                    b.Navigation("IdStatusNavigation");
                });

            modelBuilder.Entity("s20601.Data.Models.MovieCollectionMovie", b =>
                {
                    b.HasOne("s20601.Data.Models.MovieCollection", "IdMovieCollectionNavigation")
                        .WithOne("MovieCollectionMovie")
                        .HasForeignKey("s20601.Data.Models.MovieCollectionMovie", "IdMovieCollection")
                        .IsRequired()
                        .HasConstraintName("MovieCollectionMovie_MovieCollection");

                    b.HasOne("s20601.Data.Models.Movie", "Movie")
                        .WithMany("MovieCollectionMovies")
                        .HasForeignKey("Movie_Id")
                        .IsRequired()
                        .HasConstraintName("MovieCollectionMovie_Movie");

                    b.Navigation("IdMovieCollectionNavigation");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("s20601.Data.Models.MovieCollectionUser", b =>
                {
                    b.HasOne("s20601.Data.Models.MovieCollection", "IdMovieCollectionNavigation")
                        .WithMany("MovieCollectionUsers")
                        .HasForeignKey("IdMovieCollection")
                        .IsRequired()
                        .HasConstraintName("MovieCollectionUsers_MovieCollection");

                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdUserNavigation")
                        .WithMany("MovieCollectionUsers")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("MovieCollectionUsers_User");

                    b.Navigation("IdMovieCollectionNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("s20601.Data.Models.MovieCrew", b =>
                {
                    b.HasOne("s20601.Data.Models.Crew", "IdCrewNavigation")
                        .WithMany("MovieCrews")
                        .HasForeignKey("IdCrew")
                        .IsRequired()
                        .HasConstraintName("MovieCrew_Crew");

                    b.HasOne("s20601.Data.Models.Movie", "Movie")
                        .WithMany("MovieCrews")
                        .HasForeignKey("Movie_Id")
                        .IsRequired()
                        .HasConstraintName("MovieCrew_Movie");

                    b.Navigation("IdCrewNavigation");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("s20601.Data.Models.MovieGenre", b =>
                {
                    b.HasOne("s20601.Data.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("Genre_Id")
                        .IsRequired()
                        .HasConstraintName("MovieGenre_Genre");

                    b.HasOne("s20601.Data.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("Movie_Id")
                        .IsRequired()
                        .HasConstraintName("MovieGenre_Movie");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("s20601.Data.Models.MovieOfTheDay", b =>
                {
                    b.HasOne("s20601.Data.Models.Movie", "Movie")
                        .WithOne("MovieOfTheDay")
                        .HasForeignKey("s20601.Data.Models.MovieOfTheDay", "Movie_Id")
                        .IsRequired()
                        .HasConstraintName("MovieOfTheDay_Movie");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("s20601.Data.Models.MovieRate", b =>
                {
                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdUserNavigation")
                        .WithMany("MovieRates")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("MovieRate_User");

                    b.HasOne("s20601.Data.Models.Movie", "Movie")
                        .WithMany("MovieRates")
                        .HasForeignKey("Movie_Id")
                        .IsRequired()
                        .HasConstraintName("MovieRate_Movie");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("s20601.Data.Models.MovieUpdateRequest", b =>
                {
                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdUserNavigation")
                        .WithMany("MovieUpdateRequests")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("MovieUpdateRequest_User");

                    b.HasOne("s20601.Data.Models.Movie", "Movie")
                        .WithMany("MovieUpdateRequests")
                        .HasForeignKey("Movie_Id")
                        .IsRequired()
                        .HasConstraintName("MovieUpdateRequest_Movie");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("s20601.Data.Models.Post", b =>
                {
                    b.HasOne("s20601.Data.Models.Group", "IdGroupNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("Post_Group");

                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdUserNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("Post_User");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("s20601.Data.Models.Review", b =>
                {
                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdAuthorNavigation")
                        .WithOne("Review")
                        .HasForeignKey("s20601.Data.Models.Review", "IdAuthor")
                        .IsRequired()
                        .HasConstraintName("Review_User");

                    b.HasOne("s20601.Data.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("Movie_Id")
                        .IsRequired()
                        .HasConstraintName("Review_Movie");

                    b.Navigation("IdAuthorNavigation");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("s20601.Data.Models.ReviewRate", b =>
                {
                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdUserNavigation")
                        .WithOne("ReviewRate")
                        .HasForeignKey("s20601.Data.Models.ReviewRate", "IdUser")
                        .IsRequired()
                        .HasConstraintName("ReviewRate_User");

                    b.HasOne("s20601.Data.Models.Review", "Review_IdNavigation")
                        .WithMany("ReviewRates")
                        .HasForeignKey("Review_Id")
                        .IsRequired()
                        .HasConstraintName("ReviewRate_Review");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("Review_IdNavigation");
                });

            modelBuilder.Entity("s20601.Data.Models.SocialActivityLog", b =>
                {
                    b.HasOne("s20601.Data.Models.ActivityType", "IdActivityTypeNavigation")
                        .WithMany("SocialActivityLogs")
                        .HasForeignKey("IdActivityType")
                        .IsRequired()
                        .HasConstraintName("ActivityLog_ActivityType");

                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdUserNavigation")
                        .WithMany("SocialActivityLogs")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("ActivityLog_User");

                    b.Navigation("IdActivityTypeNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("s20601.Data.Models.UserRelationship", b =>
                {
                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdRelatedUserNavigation")
                        .WithMany("UserRelationshipIdRelatedUserNavigations")
                        .HasForeignKey("IdRelatedUser")
                        .IsRequired()
                        .HasConstraintName("UserRelationship_User2");

                    b.HasOne("s20601.Data.Models.ApplicationUser", "IdUserNavigation")
                        .WithMany("UserRelationshipIdUserNavigations")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("UserRelationship_User1");

                    b.Navigation("IdRelatedUserNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("s20601.Data.Models.ActivityType", b =>
                {
                    b.Navigation("SocialActivityLogs");
                });

            modelBuilder.Entity("s20601.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GroupMemberships");

                    b.Navigation("MessageIdRecipientNavigations");

                    b.Navigation("MessageIdSenderNavigations");

                    b.Navigation("MovieCollectionUsers");

                    b.Navigation("MovieRates");

                    b.Navigation("MovieUpdateRequests");

                    b.Navigation("Posts");

                    b.Navigation("Review");

                    b.Navigation("ReviewRate");

                    b.Navigation("SocialActivityLogs");

                    b.Navigation("UserRelationshipIdRelatedUserNavigations");

                    b.Navigation("UserRelationshipIdUserNavigations");
                });

            modelBuilder.Entity("s20601.Data.Models.Comment", b =>
                {
                    b.Navigation("InverseIdCommentNavigation");
                });

            modelBuilder.Entity("s20601.Data.Models.Crew", b =>
                {
                    b.Navigation("MovieCrews");
                });

            modelBuilder.Entity("s20601.Data.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("s20601.Data.Models.Group", b =>
                {
                    b.Navigation("GroupMemberships");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("s20601.Data.Models.Movie", b =>
                {
                    b.Navigation("MovieCollectionMovies");

                    b.Navigation("MovieCrews");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieOfTheDay");

                    b.Navigation("MovieRates");

                    b.Navigation("MovieUpdateRequests");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("s20601.Data.Models.MovieCollection", b =>
                {
                    b.Navigation("MovieCollectionMovie");

                    b.Navigation("MovieCollectionUsers");
                });

            modelBuilder.Entity("s20601.Data.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("s20601.Data.Models.Review", b =>
                {
                    b.Navigation("ReviewRates");
                });

            modelBuilder.Entity("s20601.Data.Models.Status", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
